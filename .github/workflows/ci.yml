name: ci

on:
  pull_request:
    paths:
      - 'apps/web/**'
      - 'apps/api/**'
      - 'schemas/**'
      - '.github/workflows/**'
  push:
    branches: [main]
    paths:
      - 'apps/web/**'
      - 'apps/api/**'
      - 'schemas/**'
      - '.github/workflows/**'

# Cancel previous runs on same PR/branch to avoid piling up
concurrency:
  group: ci-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Determine which parts changed to run only necessary jobs
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      web: ${{ steps.filter.outputs.web }}
      api: ${{ steps.filter.outputs.api }}
      schemas: ${{ steps.filter.outputs.schemas }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Paths Filter
        id: filter
        uses: dorny/paths-filter@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            web:
              - 'apps/web/**'
            api:
              - 'apps/api/**'
            schemas:
              - 'schemas/**'
  validate-schemas:
    needs: changes
    name: Schemas - Validate RuleSpec Examples
    runs-on: ubuntu-latest
    if: needs.changes.outputs.schemas == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 20
      - name: Validate RuleSpec Examples
        run: node schemas/validate-all-examples.js

  ci-web:
    needs: changes
    name: Web - Lint, Typecheck, Test
    runs-on: ubuntu-latest
    if: needs.changes.outputs.web == 'true'
    defaults:
      run:
        working-directory: apps/web
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: apps/web/pnpm-lock.yaml
      - name: Install dependencies
        run: pnpm install
      - name: Lint
        run: pnpm lint
      - name: Typecheck
        run: pnpm typecheck
      - name: Test with Coverage
        run: CI=true pnpm test:coverage

      - name: Upload Web Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: apps/web/coverage/lcov.info
          flags: web
          name: web-coverage
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  ci-api:
    needs: changes
    name: API - Build and Test
    runs-on: ubuntu-latest
    if: needs.changes.outputs.api == 'true'
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: meeple
          POSTGRES_PASSWORD: meeplepass
          POSTGRES_DB: meepleai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      qdrant:
        image: qdrant/qdrant:v1.12.4
        ports:
          - 6333:6333
          - 6334:6334
    defaults:
      run:
        working-directory: apps/api
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Install PDF extraction dependencies
        run: sudo apt-get update && sudo apt-get install -y libgdiplus
      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: '9.0.x'
      - name: Restore
        run: dotnet restore
      - name: Build
        run: dotnet build
      - name: Verify Qdrant is ready
        run: |
          echo "Waiting for Qdrant to be ready..."
          for i in {1..30}; do
            if curl -f http://localhost:6333/healthz > /dev/null 2>&1; then
              echo "Qdrant is ready!"
              break
            fi
            echo "Attempt $i: Qdrant not ready yet, waiting..."
            sleep 2
          done
          curl -v http://localhost:6333/healthz || echo "Qdrant health check failed"
      - name: Test with Coverage
        env:
          CI: true
          OPENROUTER_API_KEY: test-key-for-ci
          QDRANT_URL: http://127.0.0.1:6333
          ConnectionStrings__Postgres: Host=127.0.0.1;Port=5432;Database=meepleai_test;Username=meeple;Password=meeplepass;Maximum Pool Size=100
        run: |
          # Run only refactored tests with IAsyncLifetime cleanup (ISSUE-319)
          dotnet test \
            --filter "FullyQualifiedName~GameEndpointsTests|FullyQualifiedName~ApiEndpointIntegrationTests|FullyQualifiedName~LogsEndpointTests|FullyQualifiedName~PdfIngestEndpointsTests|FullyQualifiedName~PdfUploadEndpointsTests|FullyQualifiedName~RateLimitingIntegrationTests|FullyQualifiedName~RuleSpecHistoryIntegrationTests" \
            --logger "console;verbosity=normal" \
            -p:CollectCoverage=true \
            -p:CoverletOutputFormat=lcov \
            -p:CoverletOutput=./tests/Api.Tests/coverage/

      - name: Upload API Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: apps/api/tests/Api.Tests/coverage/coverage.info
          flags: api
          name: api-coverage
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
