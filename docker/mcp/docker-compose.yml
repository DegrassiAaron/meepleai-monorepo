services:
  github-project-manager:
    build:
      context: ../..
      dockerfile: docker/mcp/Dockerfile.github
    image: meepleai/mcp-github:latest
    container_name: mcp-github
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    pids_limit: 128
    mem_limit: 512m
    memswap_limit: 512m
    # user: "1000:1000"  # Using default 'node' user from image
    environment:
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GITHUB_OWNER=${GITHUB_OWNER}
      - GITHUB_REPO=${GITHUB_REPO}
      - NODE_ENV=production
    networks:
      - mcp-network
    command: ["tail", "-f", "/dev/null"]
    healthcheck:
      test: ["CMD-SHELL", "kill -0 1 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  memory-bank:
    build:
      context: ../..
      dockerfile: docker/mcp/Dockerfile.memory
    image: meepleai/mcp-memory:latest
    container_name: mcp-memory
    restart: unless-stopped
    # read_only: true  # Disabled - Python needs to write .pyc files
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    pids_limit: 128
    mem_limit: 512m
    memswap_limit: 512m
    # user: "1000:1000"  # Using default 'node' user from image
    environment:
      - MEMORY_PATH=/data/memories.json
      - PYTHONUNBUFFERED=1
    volumes:
      - mcp-memory:/data:rw
    tmpfs:
      - /tmp:rw,size=64m,mode=1777
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD-SHELL", "kill -0 1 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  sequential:
    build:
      context: ../..
      dockerfile: docker/mcp/Dockerfile.sequential
    image: meepleai/mcp-sequential:latest
    container_name: mcp-sequential
    restart: unless-stopped
    read_only: true
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    pids_limit: 128
    mem_limit: 256m
    memswap_limit: 256m
    # user: "1000:1000"  # Using default 'node' user from image
    tmpfs:
      - /tmp:rw,size=64m,mode=1777
    networks:
      - mcp-network

  playwright:
    build:
      context: ../..
      dockerfile: docker/mcp/Dockerfile.playwright
    image: meepleai/mcp-playwright:latest
    container_name: mcp-playwright
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SYS_ADMIN  # Required for Chromium sandbox
    pids_limit: 256
    mem_limit: 1024m
    memswap_limit: 1024m
    # user: "1000:1000"  # Using default 'node' user from image
    environment:
      - PLAYWRIGHT_BROWSERS_PATH=/tmp/playwright
    tmpfs:
      - /tmp:rw,size=512m,mode=1777
    networks:
      - mcp-network
    shm_size: 2gb  # Required for browser

  magic:
    build:
      context: ../..
      dockerfile: docker/mcp/Dockerfile.magic
    image: meepleai/mcp-magic:latest
    container_name: mcp-magic
    restart: unless-stopped
    read_only: true
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    pids_limit: 128
    mem_limit: 512m
    memswap_limit: 512m
    # user: "1000:1000"  # Using default 'node' user from image
    environment:
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
    tmpfs:
      - /tmp:rw,size=64m,mode=1777
    networks:
      - mcp-network

  claude-context:
    build:
      context: ../..
      dockerfile: docker/mcp/Dockerfile.claude-context
    image: meepleai/mcp-claude-context:latest
    container_name: mcp-claude-context
    restart: unless-stopped
    read_only: true
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    pids_limit: 128
    mem_limit: 512m
    memswap_limit: 512m
    # user: "1000:1000"  # Using default 'node' user from image
    volumes:
      - mcp-context:/data:rw
    tmpfs:
      - /tmp:rw,size=64m,mode=1777
    networks:
      - mcp-network

  knowledge-graph:
    build:
      context: ../..
      dockerfile: docker/mcp/Dockerfile.knowledge-graph
    image: meepleai/mcp-knowledge-graph:latest
    container_name: mcp-knowledge-graph
    restart: unless-stopped
    # read_only: true  # Disabled - Python needs to write .pyc files
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    pids_limit: 128
    mem_limit: 512m
    memswap_limit: 512m
    # user: "1000:1000"  # Using default 'node' user from image
    environment:
      - QDRANT_URL=${KG_QDRANT_URL:-http://qdrant:6333}
      - QDRANT_COLLECTION=${KG_COLLECTION:-knowledge_graph}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - PYTHONUNBUFFERED=1
    tmpfs:
      - /tmp:rw,size=64m,mode=1777
    networks:
      - mcp-network
      - meepleai  # Connect to main app network for Qdrant access
    depends_on:
      - qdrant

  n8n-manager:
    build:
      context: ../..
      dockerfile: docker/mcp/Dockerfile.n8n
    image: meepleai/mcp-n8n:latest
    container_name: mcp-n8n
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    pids_limit: 128
    mem_limit: 512m
    memswap_limit: 512m
    # user: "1000:1000"  # Using default 'node' user from image
    environment:
      - N8N_API_URL=${N8N_API_URL:-http://n8n:5678/api/v1}
      - N8N_API_KEY=${N8N_API_KEY}
      - N8N_API_TIMEOUT=${N8N_API_TIMEOUT:-30000}
      - NODE_ENV=production
    networks:
      - mcp-network
      - meepleai  # Connect to main app network for n8n access
    command: ["tail", "-f", "/dev/null"]
    healthcheck:
      test: ["CMD-SHELL", "kill -0 1 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  # Qdrant for Knowledge Graph (if not already running)
  qdrant:
    image: qdrant/qdrant:latest
    container_name: mcp-qdrant
    restart: unless-stopped
    ports:
      - "6335:6333"  # Different port to avoid conflict with main Qdrant
      - "6336:6334"  # gRPC port
    volumes:
      - mcp-qdrant:/qdrant/storage
    networks:
      - mcp-network
      - meepleai
    healthcheck:
      test: ["CMD-SHELL", "kill -0 1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

volumes:
  mcp-memory:
    driver: local
  mcp-context:
    driver: local
  mcp-qdrant:
    driver: local

networks:
  mcp-network:
    driver: bridge
    name: mcp-network
  meepleai:
    external: true
