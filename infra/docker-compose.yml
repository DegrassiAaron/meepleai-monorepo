services:
  postgres:
    image: postgres:16.4-alpine3.20
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-meeple}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-meeplepass}
      POSTGRES_DB: ${POSTGRES_DB:-meepleai}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
      - meepleai

  qdrant:
    image: qdrant/qdrant:v1.12.4
    restart: unless-stopped
    ports:
      - "6333:6333"  # HTTP REST API
      - "6334:6334"  # gRPC API
    volumes:
      - qdrantdata:/qdrant/storage
    healthcheck:
      test: ["CMD-SHELL", "kill -0 1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks:
      - meepleai

  redis:
    image: redis:7.4.1-alpine3.20
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - meepleai

  ollama:
    image: ollama/ollama:latest
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollamadata:/root/.ollama
    healthcheck:
      test: ["CMD-SHELL", "ollama list || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - meepleai
    # Uncomment if you have NVIDIA GPU support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  ollama-pull:
    image: curlimages/curl:latest
    container_name: ollama-pull
    depends_on:
      ollama:
        condition: service_healthy
    restart: "no"
    command: >
      sh -c '
        echo "Pulling nomic-embed-text model..." &&
        curl -X POST http://ollama:11434/api/pull -d "{\"name\":\"nomic-embed-text\"}" &&
        echo "Model pull initiated!"
      '
    networks:
      - meepleai

  seq:
    image: datalust/seq:2025.1
    restart: unless-stopped
    environment:
      ACCEPT_EULA: "Y"
    ports:
      - "5341:5341"  # Ingestion port
      - "8081:80"    # Web UI port
    volumes:
      - seqdata:/data
    networks:
      - meepleai

  # OPS-02: OpenTelemetry Observability Stack
  jaeger:
    image: jaegertracing/all-in-one:1.74.0
    restart: unless-stopped
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
      SPAN_STORAGE_TYPE: "badger"
      BADGER_EPHEMERAL: "false"
      BADGER_DIRECTORY_VALUE: "/badger/data"
      BADGER_DIRECTORY_KEY: "/badger/key"
    ports:
      - "16686:16686"  # Jaeger UI
      - "4318:4318"    # OTLP HTTP receiver
      - "4317:4317"    # OTLP gRPC receiver (optional)
    volumes:
      - jaegerdata:/badger
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:16686"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - meepleai

  prometheus:
    image: prom/prometheus:v3.7.0
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheusdata:/prometheus
    ports:
      - "9090:9090"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - meepleai

  grafana:
    image: grafana/grafana:11.4.0
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SERVER_ROOT_URL: "http://localhost:3001"
    volumes:
      - grafanadata:/var/lib/grafana
      - ./grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
      - ./dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
      - jaeger
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - meepleai

  n8n:
    image: n8nio/n8n:1.114.4
    restart: unless-stopped
    env_file:
      - ./env/n8n.env.dev
    ports:
      - "5678:5678"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - meepleai

  api:
    build:
      context: ../apps/api
      dockerfile: ./src/Api/Dockerfile
    restart: unless-stopped
    env_file:
      - ./env/api.env.dev
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:8080
      ConnectionStrings__Postgres: Host=postgres;Database=${POSTGRES_DB:-meepleai};Username=${POSTGRES_USER:-meeple};Password=${POSTGRES_PASSWORD:-meeplepass}
      QDRANT_URL: http://qdrant:6333
      REDIS_URL: redis:6379
      OLLAMA_URL: http://ollama:11434
      EMBEDDING_PROVIDER: ollama
      EMBEDDING_MODEL: nomic-embed-text
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_started
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 20s
    networks:
      - meepleai

  web:
    build:
      context: ../apps/web
      dockerfile: ./Dockerfile
    restart: unless-stopped
    env_file:
      - ./env/web.env.dev
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/ || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 12
      start_period: 60s
    networks:
      - meepleai

volumes:
  pgdata:
  qdrantdata:
  seqdata:
  ollamadata:
  # OPS-02: OpenTelemetry volumes
  jaegerdata:
  prometheusdata:
  grafanadata:

networks:
  meepleai:
    driver: bridge
