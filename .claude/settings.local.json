{
  "permissions": {
    "allow": [
      "Bash(dotnet build)",
      "Bash(dotnet test)",
      "Bash(dotnet test:*)",
      "Bash(dotnet build:*)",
      "Bash(gh pr checks:*)",
      "Bash(gh run view:*)",
      "Bash(python:*)",
      "Bash(gh pr list:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(gh pr view:*)",
      "Bash(gh issue view:*)",
      "Bash(gh issue list:*)",
      "Bash(gh pr comment:*)",
      "Bash(npm run test:*)",
      "Bash(cat:*)",
      "Bash(test:*)",
      "Bash(dotnet ef migrations add:*)",
      "Bash(docker compose restart:*)",
      "Bash(docker compose logs:*)",
      "Bash(docker compose:*)",
      "Bash(gh auth:*)",
      "Bash(powershell:*)",
      "Bash(docker ps:*)",
      "Bash(dotnet ef migrations:*)",
      "Bash(dotnet ef database update:*)",
      "Bash(docker exec:*)",
      "WebFetch(domain:github.com)",
      "Bash(gh repo view:*)",
      "Bash(gh api:*)",
      "Bash(gh issue create:*)",
      "Bash(pwsh:*)",
      "Bash(docker:*)",
      "Bash(npm install)",
      "Bash(for file in Dockerfile.{claude-context,knowledge-graph,magic,memory,sequential})",
      "Bash(do sed -i 's/RUN addgroup -g 1000 mcp 2>\\/dev\\/null || true.*$/RUN GROUP_NAME=$(getent group 1000 | cut -d: -f1) \\&\\& \\\\/' \"$file\")",
      "Bash(done)",
      "Bash(netstat:*)",
      "Bash(findstr:*)",
      "Bash(taskkill:*)",
      "Bash(timeout 600 docker compose build)",
      "Bash(tee:*)",
      "Bash(curl:*)",
      "Bash(sort:*)",
      "Bash(for:*)",
      "Bash(do echo \"=== $container ===\")",
      "mcp__github-project-manager__github_list_issues",
      "Bash(npx ajv-cli validate:*)",
      "Bash(node:*)",
      "mcp__aakarsh-sasi-memory-bank-mcp__track_progress",
      "Bash(git checkout:*)",
      "Bash(gh pr create:*)",
      "Bash(git fetch:*)",
      "Bash(git rebase:*)",
      "Bash(git stash:*)",
      "mcp__github-project-manager__github_review_pr",
      "Bash(pnpm typecheck:*)",
      "Bash(npx tsc:*)",
      "Bash(gh run list:*)",
      "Bash(gh pr merge:*)",
      "Bash(timeout 120 dotnet test --filter \"FullyQualifiedName~AdminStatsEndpointsTests.GetAdminStats_WhenAdminAuthenticated_ReturnsAggregatedStatistics\" --verbosity normal)",
      "Bash(timeout:*)",
      "Bash(git branch:*)",
      "Bash(gh run watch:*)",
      "Bash(pnpm test:*)",
      "Bash(npm test:*)",
      "Bash(Select-String -Pattern \"FAIL|PASS|Error|Unauthorized|OK\" -Context 1,2)",
      "Bash(dotnet run:*)",
      "WebSearch",
      "Bash(Select-String -Pattern \"error|warning|successo|riuscit|Compil\" -Context 0,1)",
      "Read(//d//**)",
      "Bash(git log:*)",
      "Bash(do)",
      "Bash(echo:*)",
      "Bash(gh pr close:*)",
      "Bash(dotnet list package:*)",
      "Bash(Select-String -Pattern \"Docnet|iText|Qdrant|StackExchange|Tesseract|QuestPDF|Microsoft.EntityFrameworkCore|Npgsql\" -Context 0,1)",
      "Bash(Select-String -Pattern \"FAIL|PASS|Error|Total tests\" -Context 1,2)",
      "Bash(dotnet clean:*)",
      "Bash(dotnet restore:*)",
      "Bash(Select-Object -First 100)",
      "Bash(cmd /c:*)",
      "Bash(Select-String -Pattern \"FAIL|PASS|Error|Superato|Non superato\" -Context 0,1)",
      "Bash(mv:*)",
      "Bash(git reset:*)",
      "Bash(Select-String -Pattern \"FAIL|PASS|Tests:|Test Suites:|Ran all test|error|warning\" -Context 0,1)",
      "Bash(pnpm install:*)",
      "Bash(pnpm lint:*)",
      "Bash(pnpm test:coverage:*)",
      "Bash(gh issue comment:*)",
      "Bash(git pull:*)",
      "Bash(gh issue close:*)",
      "mcp__github-project-manager__github_create_issue",
      "Bash(gh issue edit:*)",
      "Bash(Select-String -Pattern \"n8n|N8N|webhook\")",
      "Bash(gh label:*)",
      "Bash(gh pr edit:*)",
      "Bash(find . -maxdepth 2 -name \"README.md\" -exec sh -c 'echo \"\"\"\"$(wc -l < \"\"\"\"$1\"\"\"\") $1\"\"\"\"' _ {})",
      "Bash(awk:*)",
      "Bash(ConvertFrom-Json)",
      "Bash(Where-Object { $_itle -match \"CHESS-03|PDF-02|AI-01\" })",
      "Bash(Format-Table -AutoSize)",
      "Bash(Select-String -Pattern \"error|warning|successo|Build succeeded\" -Context 0,1)",
      "Bash(Select-String -Pattern \"FAIL|PASS|Error|Total tests|Test Run\" -Context 0,1)",
      "Bash(Select-String -Pattern \"HTTP|Set-Cookie|userId\")",
      "Bash(find:*)",
      "Bash(Select-String -Pattern \"error|warning|successo|OK|FAIL|Total|chunks\" -Context 0,1)",
      "Bash(/dev/null)",
      "Bash(tasklist)",
      "Bash(do netstat:*)",
      "Bash(break)",
      "Bash(do curl -s http://localhost:8080/health/ready)",
      "Bash(Select-String -Pattern \"FAIL|PASS|Error|Total tests|Test Run|Question|Answer|SUCCESS|Token\" -Context 0,1)",
      "Bash(Select-String -Pattern \"Testing:|PASS|FAIL|Summary|Total|Success\")",
      "Bash(curl.exe -s -X POST -H \"Cookie: meeple_session=q0NLHKVkqdqUbO2fQuY9wIzAZlmxR+6z50+bpq3Awls=\" -H \"Content-Type: application/json\" -d \"{\"\"question\"\":\"\"What is en passant?\"\"}\" http://localhost:8080/agents/chess)",
      "Bash(bash:*)",
      "mcp__magic__magic_analyze",
      "mcp__sequential__sequential_start",
      "mcp__sequential__sequential_step",
      "mcp__sequential__sequential_conclude",
      "Bash(pnpm add:*)",
      "Bash(pnpm dev)",
      "Bash(pnpm dev:*)",
      "Bash(Select-String -Pattern \"FAIL|PASS|Error|Total tests|Succeeded|Failed\" -Context 0,1)",
      "Bash(Select-String -Pattern \"FAIL|PASS|Error|Build|Compil\" -Context 0,1)",
      "Bash(curl.exe:*)",
      "Bash(powershell.exe:*)",
      "Bash(gh search issues:*)",
      "Bash(pnpm test:e2e:*)",
      "Bash(pnpm exec playwright:*)",
      "Bash(Select-String -Pattern \"passed|failed|running\" -Context 0,1)",
      "Bash(Select-String -Pattern \"BCrypt|Identity\")",
      "Bash(dotnet add package:*)",
      "Bash(Select-String -Pattern \"FAIL|Error|Exception|Assert\" -Context 2,3)",
      "mcp__github-project-manager__github_create_pr",
      "Bash(while read file)",
      "Bash(do if grep -q -E '(PostAsJsonAsync|GetAsync|PutAsJsonAsync|DeleteAsync|HttpRequestMessage).*(HttpMethod|\"\"\"\"/)(auth|admin|games|chat|agents|n8n|logs|ingest|rules|pdf)' \"$file\")",
      "Bash(then if ! grep -q \"/api/v1/\" \"$file\")",
      "Bash(then echo \"$file\" fi fi done)",
      "Read(//d/**)",
      "Bash(git restore:*)",
      "Bash(CI=true pnpm test:*)",
      "Bash(export CI=true)",
      "Bash(Select-String -Pattern \"Passed|Failed|Total tests|Test Run\")",
      "Bash(cd:*)",
      "Bash(git -C \"D:\\Repositories\\meepleai-monorepo\" log --oneline -20)",
      "Bash(git -C \"D:\\Repositories\\meepleai-monorepo\" status)",
      "Bash(git -C \"D:\\Repositories\\meepleai-monorepo\" branch -a)",
      "Bash(git -C \"D:\\Repositories\\meepleai-monorepo\" diff apps/api/tests/Api.Tests/StreamingRagServiceTests.cs)",
      "Bash(git -C \"D:\\Repositories\\meepleai-monorepo\" log --all --oneline --grep=\"263\")",
      "Bash(git -C \"D:\\Repositories\\meepleai-monorepo\" log --all --oneline)",
      "Bash(git -C \"D:\\Repositories\\meepleai-monorepo\" log --all --oneline --grep=\"#263\\|API-05\")",
      "Bash(gh:*)",
      "Bash(git -C \"D:\\Repositories\\meepleai-monorepo\" log --oneline --all --grep=\"299\")",
      "mcp__github-project-manager__github_search_code",
      "mcp__magic__magic_generate",
      "Bash(Select-String -Pattern \"FAIL|PASS|Error|Total tests|Test Run|Succeeded|Failed\" -Context 0,1)",
      "Bash(Select-String -Pattern \"PASS|FAIL|Tests:|Test Suites:|Ran all test|error|warning\" -Context 0,1)",
      "Bash(Select-String -Pattern \"Passed|Failed|Total tests|Test Run|Passed!|Failed!\" -Context 1,2)",
      "Bash(git mv:*)",
      "Bash(Select-String -Pattern \"Superato|Non superato|Ignorato|Totale\" -Context 0,1)",
      "Bash(dotnet format:*)",
      "Bash(Where-Object { $_ame -eq \"CodeQL Security Analysis (csharp)\" })",
      "Bash(Format-Table name,state,conclusion)",
      "SlashCommand(/close-issue:*)",
      "Bash(git merge:*)",
      "Bash(Select-String -Pattern \"Passed|Failed|Total tests|Test Run|error|warning\" -Context 0,1)",
      "Bash(Select-String -Pattern \"(error|warning|Build succeeded|Build FAILED)\" -Context 0,2)",
      "Bash(git cherry-pick:*)",
      "Bash(pnpm test:a11y:*)",
      "Bash(CI=true pnpm test:a11y:*)",
      "Bash(CI=true timeout 60 pnpm test:a11y:*)",
      "Bash(set CI=true)",
      "Bash(Select-String -Pattern \"PASS|FAIL|Test Suites\")",
      "Bash(Select-Object -First 10)",
      "Bash(pnpm audit:a11y:*)",
      "Bash(Select-String -Pattern \"ready|started|compiled\" -Context 0,1)",
      "WebFetch(domain:dequeuniversity.com)",
      "Bash(npx tsx:*)"
    ],
    "deny": [],
    "ask": []
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "github-project-manager",
    "memory-bank",
    "n8n",
    "claude-context",
    "knowledge-graph",
    "magic",
    "playwright",
    "sequential",
    "aakarsh-sasi-memory-bank-mcp"
  ]
}
